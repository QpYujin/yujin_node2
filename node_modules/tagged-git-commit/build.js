'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _execa = require('execa');

var _execa2 = _interopRequireDefault(_execa);

var _isGitRepository = require('is-git-repository');

var _isGitRepository2 = _interopRequireDefault(_isGitRepository);

var _os = require('os');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pathIsAbsolute = require('path-is-absolute');

var _pathIsAbsolute2 = _interopRequireDefault(_pathIsAbsolute);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cwd = process.cwd();

var taggedGitCommits = function taggedGitCommits() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      path = _ref.path,
      lookBehind = _ref.lookBehind,
      local = _ref.local,
      remote = _ref.remote;

  var taggedCommits = [];
  var getCommits = void 0;

  var thisPath = path || cwd;
  thisPath = (0, _pathIsAbsolute2.default)(thisPath) ? thisPath : _path2.default.join(cwd, thisPath);
  var thisLookBehind = lookBehind || 1;
  var thisLocal = local === undefined ? true : local;
  var thisRemote = remote || 'origin';

  if (!(0, _isGitRepository2.default)(thisPath)) {
    return [];
  }

  try {
    var getTaggedCommitsExec = void 0;
    var getCommitsExec = void 0;

    if (thisLocal) {
      if ((0, _os.platform)() === 'win32') {
        getCommitsExec = 'pushd ' + thisPath + ' & git show-ref';
        getTaggedCommitsExec = 'pushd ' + thisPath + ' & git show-ref --tags';
      } else {
        getCommitsExec = '(cd ' + thisPath + ' ; git show-ref)';
        getTaggedCommitsExec = '(cd ' + thisPath + ' ; git show-ref --tags)';
      }

      getCommits = _execa2.default.shellSync(getCommitsExec).stdout;
    } else {
      if ((0, _os.platform)() === 'win32') {
        getCommitsExec = 'pushd ' + thisPath + ' & git ls-remote ' + thisRemote;
        getTaggedCommitsExec = 'pushd ' + thisPath + ' & git ls-remote --tags ' + thisRemote;
      } else {
        getCommitsExec = '(cd ' + thisPath + ' ; git ls-remote)';
        getTaggedCommitsExec = '(cd ' + thisPath + ' ; git ls-remote --tags ' + thisRemote + ')';
      }

      getCommits = _execa2.default.shellSync(getCommitsExec).stdout;
    }

    if (getCommits.includes('refs/tags')) {
      var getTaggedCommits = _execa2.default.shellSync(getTaggedCommitsExec).stdout;

      taggedCommits = getTaggedCommits.split('\n');
      taggedCommits = taggedCommits.slice(-Math.abs(thisLookBehind));
    }
    return taggedCommits;
  } catch (e) {
    return [];
  }
};

exports.default = taggedGitCommits;
module.exports = exports['default'];
